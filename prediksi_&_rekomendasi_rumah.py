# -*- coding: utf-8 -*-
"""Prediksi & Rekomendasi Rumah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_uU2wzA0mAyqa57OWL-7fBHbcbsdIizr

# Library
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files
import joblib

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""# Dataset"""

files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d nafisbarizki/daftar-harga-rumah-jabodetabek

"""Import dataset yang di download dari Kaggle"""

!unzip daftar-harga-rumah-jabodetabek.zip

"""Hasil dari download tadi berupa ZIP makadari itu kita perlu melakukan unzip supaya dataset dapat digunakan"""

df = pd.read_csv('jabodetabek_house_price.csv')

print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])

"""# Exploratory Data Analysis (EDA)

Exploratory data analysis merupakan proses investigasi awal pada data untuk menganalisis karakteristik, menemukan pola, anomali, dan memeriksa asumsi pada data. Teknik ini biasanya menggunakan bantuan statistik dan representasi grafis atau visualisasi.
"""

df.head()

df.info()

df.shape

df.isnull().sum()

df.describe()

df.duplicated().sum()

"""Insight
---

Dari info diatas, tidak terdapat data duplikat pada dataset

# **Pre cleaning**
"""

df_clean = df.copy()

# Drop kolom yang tidak relevan untuk prediksi harga
drop_cols = ['url', 'title', 'address', 'ads_id', 'year_built']
df_clean.drop(columns=drop_cols, inplace=True)

"""## Memperbaiki tipedata"""

# Kolom numerik yang harusnya integer
int_cols = [
    'bedrooms', 'bathrooms', 'maid_bedrooms', 'maid_bathrooms',
    'floors', 'building_age', 'garages', 'carports'
]
for col in int_cols:
    df_clean[col] = df_clean[col].astype('Int64')

# Kolom kategori
cat_cols = [
    'district', 'city', 'property_type', 'certificate',
    'property_condition', 'building_orientation', 'furnishing'
]
for col in cat_cols:
    df_clean[col] = df_clean[col].astype('category')

df_clean['electricity'] = (df_clean['electricity'].astype(str).str.extract(r'(\d+)').astype('Int64'))

df_clean.head()

df_clean.info()

print("Kolom setelah pre-cleaning:")
print(df_clean.columns.tolist())

# Mengambil salah satu kolom secara acak

pd.set_option('display.max_columns', None)
df_clean.iloc[0]

"""# EDA Univariate

## **Distrbusi Harga Rumah**
"""

plt.figure(figsize=(10, 5))
sns.histplot(df_clean['price_in_rp'], bins=50, kde=True)
plt.title('Distribusi Harga Rumah')
plt.xlabel('Harga (Rp)')
plt.ylabel('Jumlah Properti')
plt.show()

"""## **Distribusi numerik**"""

numeric_cols = ['bedrooms', 'bathrooms', 'land_size_m2', 'building_size_m2',
                'carports', 'floors', 'maid_bedrooms', 'maid_bathrooms',
                'garages', 'electricity', 'building_age']

for col in numeric_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(df_clean[col], bins=30, kde=True)
    plt.title(f'Distribusi {col}')
    plt.xlabel(col)
    plt.ylabel('Jumlah Properti')
    plt.show()

"""## **Fitur Kategorikal**"""

categorical_cols = ['city', 'district', 'property_type', 'certificate',
                    'property_condition', 'furnishing']

for col in categorical_cols:
    plt.figure(figsize=(10, 4))
    sns.countplot(data=df_clean, x=col, order=df_clean[col].value_counts().index)
    plt.title(f'Distribusi Kategori: {col}')
    plt.xticks(rotation=45)
    plt.ylabel('Jumlah Properti')
    plt.show()

"""# **EDA Multivariate**

## **Korelasi matriks**
"""

plt.figure(figsize=(14, 10))
corr = df_clean.select_dtypes(include='number').corr()
sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", square=True, linewidths=0.5)
plt.title('Matriks Korelasi Fitur Numerik')
plt.show()

"""## **harga rata rata perkota**"""

plt.figure(figsize=(10, 4))
avg_price_city = df_clean.groupby('city')['price_in_rp'].mean().sort_values(ascending=False)
sns.barplot(x=avg_price_city.index, y=avg_price_city.values)
plt.title('Harga Rata-rata Rumah per Kota')
plt.ylabel('Harga (Rp)')
plt.xticks(rotation=45)
plt.show()

"""## **Harga rata rata berdasarkan kondisi properti**"""

plt.figure(figsize=(8, 4))
avg_price_type = df_clean.groupby('property_condition')['price_in_rp'].mean().sort_values(ascending=False)
sns.barplot(x=avg_price_type.index, y=avg_price_type.values)
plt.title('Harga Rata-rata Berdasarkan Tipe Properti')
plt.ylabel('Harga (Rp)')
plt.xticks(rotation=45)
plt.show()

"""## **scatter ukuran vs harga**"""

plt.figure(figsize=(10, 5))
sns.scatterplot(data=df_clean, x='land_size_m2', y='price_in_rp', hue='city')
plt.title('Luas Tanah vs Harga Rumah')
plt.xlabel('Luas Tanah (m2)')
plt.ylabel('Harga Rumah (Rp)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""# Data Preparation

## **handling missing value**
"""

df_clean.isnull().sum()

# Drop kolom dengan missing value > 40%
df_clean.drop(columns=['building_age', 'building_orientation'], inplace=True)

# Drop baris dengan missing kecil
df_clean.dropna(subset=['property_type'], inplace=True)

# Imputasi numerik dengan median
median_cols = ['bedrooms', 'bathrooms', 'land_size_m2', 'building_size_m2', 'floors', 'electricity']
for col in median_cols:
    df_clean[col].fillna(df_clean[col].median(), inplace=True)

# Imputasi kategorik dengan mode
mode_cols = ['certificate', 'property_condition', 'furnishing']
for col in mode_cols:
    df_clean[col].fillna(df_clean[col].mode()[0], inplace=True)

df_clean.isnull().sum()

df_clean.head()

"""## **Eda Final**"""

plt.figure(figsize=(10, 5))
sns.histplot(df_clean['price_in_rp'], bins=50, kde=True)
plt.title('Distribusi Harga Rumah (Rp)')
plt.xlabel('Harga Rumah (Rp)')
plt.ylabel('Frekuensi')
plt.show()

# Log Transform
plt.figure(figsize=(10, 5))
sns.histplot(np.log1p(df_clean['price_in_rp']), bins=50, kde=True)
plt.title('Distribusi Harga Rumah (log1p Rp)')
plt.xlabel('Log Harga Rumah')
plt.ylabel('Frekuensi')
plt.show()

"""#**Feature Engineering**"""

# Buat kolom baru untuk harga log
df_clean['price_log'] = np.log1p(df_clean['price_in_rp'])

df_model = df_clean.copy()

# One-hot encoding
df_model = pd.get_dummies(df_model, columns=[
    'city', 'property_type', 'certificate',
    'furnishing', 'property_condition'
], drop_first=True)

df_model = df_model.drop(columns=[
    'price_in_rp', 'facilities', 'lat', 'long', 'district'
])

"""## Splitting"""

X = df_model.drop(columns='price_log')
y = df_model['price_log']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Build Model"""

lr = LinearRegression(
    fit_intercept=True,
    copy_X=True,
    n_jobs=None,
    positive=False
)
lr.fit(X_train, y_train)

rf = RandomForestRegressor(
    n_estimators=100,
    max_depth=None,
    min_samples_split=2,
    min_samples_leaf=1,
    max_features='sqrt',
    random_state=42,
    n_jobs=-1
)

rf.fit(X_train, y_train)

"""# Eval"""

y_pred_lr = lr.predict(X_test)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
r2_lr = r2_score(y_test, y_pred_lr)

print(f"Linear Regression RMSE: {rmse_lr}")
print(f"Linear Regression RÂ²: {r2_lr}")

y_pred_rf = rf.predict(X_test)
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
r2_rf = r2_score(y_test, y_pred_rf)

print(f"Random Forest RMSE: {rmse_rf}")
print(f"Random Forest RÂ²: {r2_rf}")

"""Insight

---

Bisa dilihat dari evaluasi diatas, hasil dari Random Forest lebih bagus daripada Linear Regression

## **Visualisasi**
"""

y_pred = rf.predict(X_test)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Garis ideal
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price (Random Forest)")
plt.grid(True)
plt.show()

residuals = y_test - y_pred

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_pred, y=residuals, alpha=0.6)
plt.axhline(0, color='red', linestyle='--')
plt.xlabel("Predicted Price")
plt.ylabel("Residuals")
plt.title("Residuals vs Predicted Price (Random Forest)")
plt.grid(True)
plt.show()

"""# Save Model"""

joblib.dump(rf, 'random_forest_model.pkl')

"""# Fitur Utama

## **Fungsi Prediksi**
"""

def predict_price(user_input: dict, model, feature_columns):
    df_input = pd.DataFrame([user_input])
    df_input = df_input[feature_columns]
    log_price = model.predict(df_input)[0]
    price = np.expm1(log_price)
    return round(price)

"""## **Fungsi Rekomendasi**"""

def recommend_houses(budget, df_original, top_n=5, tolerance=0.10):
    min_price = budget * (1 - tolerance)
    max_price = budget * (1 + tolerance)

    filtered = df_original[
        (df_original['price_in_rp'] >= min_price) &
        (df_original['price_in_rp'] <= max_price)
    ].sort_values(by='price_in_rp').head(top_n)

    return filtered[['district', 'city', 'bedrooms', 'bathrooms', 'land_size_m2',
                     'building_size_m2', 'price_in_rp', 'certificate', 'furnishing']]

"""## Model Testing"""

budget_user = input("Masukkan budget Anda (dalam Rupiah): ")

try:
  budget_user = int(budget_user)
  recommended_df = recommend_houses(budget_user, df_clean, top_n=5)
  print(f"\nðŸ“Œ Rekomendasi Rumah Untuk Budget Rp {budget_user:,.0f}:\n")
  if not recommended_df.empty:
    print(recommended_df.to_string(index=False))
  else:
    print("Tidak ada rumah yang ditemukan dalam rentang budget Anda.")
except ValueError:
  print("Input tidak valid. Harap masukkan angka untuk budget.")

budget_user = input("Masukkan budget Anda (dalam Rupiah): ")

try:
  budget_user = int(budget_user)
  recommended_df = recommend_houses(budget_user, df_clean, top_n=5)
  print(f"\nðŸ“Œ Rekomendasi Rumah Untuk Budget Rp {budget_user:,.0f}:\n")
  if not recommended_df.empty:
    print(recommended_df.to_string(index=False))
  else:
    print("Tidak ada rumah yang ditemukan dalam rentang budget Anda.")
except ValueError:
  print("Input tidak valid. Harap masukkan angka untuk budget.")